{"ast":null,"code":"var _jsxFileName = \"/Users/skillsmontage/Desktop/Kodilla Projekty iMac/React/react-stoper/src/components/FormattedTime/FormattedTime.js\";\nimport styles from './FormattedTime.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormattedTime = props => {\n  /** The padStart method takes two arguments: the expected string length and an optional padding character. \n    We use 'String()' to convert a number to a string because the padStart/End method is available for 'string'\n    We use the modulo '%' operation to correctly calculate 'ms'\n   */\n  const hours = String(Math.floor(props.time / 360000 % 24)).padStart(2, '0');\n  const minutes = String(Math.floor(props.time / 6000 % 60)).padStart(2, '0');\n  const seconds = String(Math.floor(props.time / 100 % 60)).padStart(2, '0');\n  const milliseconds = String(props.time % 1000).padStart(3, '0');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.timer,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [hours, \":\", minutes, \":\", seconds, /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\".\", milliseconds]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_c = FormattedTime;\nexport default FormattedTime;\nvar _c;\n$RefreshReg$(_c, \"FormattedTime\");","map":{"version":3,"names":["styles","jsxDEV","_jsxDEV","FormattedTime","props","hours","String","Math","floor","time","padStart","minutes","seconds","milliseconds","className","timer","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/skillsmontage/Desktop/Kodilla Projekty iMac/React/react-stoper/src/components/FormattedTime/FormattedTime.js"],"sourcesContent":["import styles from './FormattedTime.module.scss';\n\nconst FormattedTime = (props) => {\n  /** The padStart method takes two arguments: the expected string length and an optional padding character. \n    We use 'String()' to convert a number to a string because the padStart/End method is available for 'string'\n    We use the modulo '%' operation to correctly calculate 'ms'\n   */\n  const hours = String(Math.floor((props.time / 360000) % 24)).padStart(2, '0');\n  const minutes = String(Math.floor((props.time / 6000) % 60)).padStart(2, '0');\n  const seconds = String(Math.floor((props.time / 100) % 60)).padStart(2, '0');\n  const milliseconds = String(props.time % 1000).padStart(3, '0');\n\n  return (\n    <div className={styles.timer}>\n      <p>\n        {hours}:{minutes}:{seconds}\n        <span>.{milliseconds}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default FormattedTime;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAC/B;AACF;AACA;AACA;EACE,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACC,KAAK,CAAEJ,KAAK,CAACK,IAAI,GAAG,MAAM,GAAI,EAAE,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC7E,MAAMC,OAAO,GAAGL,MAAM,CAACC,IAAI,CAACC,KAAK,CAAEJ,KAAK,CAACK,IAAI,GAAG,IAAI,GAAI,EAAE,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC7E,MAAME,OAAO,GAAGN,MAAM,CAACC,IAAI,CAACC,KAAK,CAAEJ,KAAK,CAACK,IAAI,GAAG,GAAG,GAAI,EAAE,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC5E,MAAMG,YAAY,GAAGP,MAAM,CAACF,KAAK,CAACK,IAAI,GAAG,IAAI,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAE/D,oBACER,OAAA;IAAKY,SAAS,EAAEd,MAAM,CAACe,KAAM;IAAAC,QAAA,eAC3Bd,OAAA;MAAAc,QAAA,GACGX,KAAK,EAAC,GAAC,EAACM,OAAO,EAAC,GAAC,EAACC,OAAO,eAC1BV,OAAA;QAAAc,QAAA,GAAM,GAAC,EAACH,YAAY;MAAA;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACC,EAAA,GAlBIlB,aAAa;AAoBnB,eAAeA,aAAa;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}